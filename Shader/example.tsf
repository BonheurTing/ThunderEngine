Shader "TestShader"
{
    Properties
    {
    }
    Variants
    {  
        int _Variants = 0;
        float4 _Variant1;
    }
    Parameters "Pass"
    {
        float4x4 WorldToObject;
        float4x4 ViewProjection;
        Texture2D _MainTex;
        Texture2D<float4> Albedo;
        StructuredBuffer<float4> _StructuredBuffer;
    }
    Parameters "Object"
    {
        float3 LastPosition;
    }
    Parameters "Global"
    {
        float4 _Color2;
        int RenderQuality = 1;
    }
    SubShader
    {
        using VertexEntry = vert;
        using PixelEntry = frag;

        struct vs_input
        {
            float4 vertex : POSITION;
            float2 uv : TEXCOORD0;
        };
        
        struct v2f
        {
            float4 pos : SV_POSITION;
            float2 uv : TEXCOORD0;
        };
        
        struct ps_out
        {
            float4 color0 : SV_Target0;
            float4 color1 : SV_TARGET1;
        };
        
        v2f vert(vs_input v)
        {
            v2f o;
            o.pos = v.vertex.wwxy;
            o.uv = v.uv;
            return o;
        }
        
        float test_function(int x) : SV_Target
        {
            return 0.5;
        }

        ps_out frag(in v2f v)
        {
            for (int i = 0; i < 10; i++)
            {
                x += y;
                if (x > 0)
                {
                    break;
                }
                continue;
            }
            if (x+y > 100)
            {
                y = 100;
                if (x > 50)
                {
                    x = 50;
                }
                else
                {
                    x = 0;
                }
            }
            if (5 < 9)
            {
                x = y;
            }
            
            if constexpr (x > 10)
            {
                y = 20;
            }
            
            
            // 测试注释
            float test_float4[3] = { 3, /*7*/4, 5 };
            /*测试
            多行注释
            */
            float test_float_component = (float)test_float4[2];
            int to_convert = x > 1 ? 3: 5;
            float converted = float(to_convert);
            float3 test_float3 = float3(1, 2, 3);
            float4 test_initialize = float4(1);
            test_initialize = float4(test_float3, 1);
            
            converted = (float)(to_convert);
            converted = (float)to_convert;
            ps_out test_out = (ps_out)0;

            ps_out out_;
            float test_return_value = test_function(1)[0][1][2 * 5][x + 1].xxx;
            out_.color0 = test_return_value.xxxx;
            out_.color1 = test_return_value.rrrr;
            return out_;
        }
    }
}